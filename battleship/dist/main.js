(()=>{"use strict";class t{constructor(t){this.activePositions=t,this.length=t.length}getActivePositions(){return this.activePositions}isSunk(){return 0===this.activePositions.length}hit(t,e){let i=this.activePositions.findIndex((i=>i[0]===t&&i[1]===e));return i>=0&&(this.activePositions.splice(i,1),!0)}}class e{constructor(t){this.ships=[],this.size=t,this.board=[];for(let e=0;e<t;e++){this.board.push([]);for(let i=0;i<t;i++)this.board[e].push(0)}}getShips(){return this.ships}getSize(){return this.size}getBoard(){return this.board}addShip(e,i,s){let r=function(e,i,s){if(e<0)throw new Error("Invalid length");if(!Array.isArray(i))throw new Error("Invalid head position. Head position must be an array.");if(2!=i.length)throw new Error("Invalid head position. Head position must have 2 coordinates [x,y].");if("north"!==s&&"west"!==s)throw console.log(s),new Error("Invalid direction faced");let r=[],o=i[0],n=i[1];for(let t=0;t<e;t++)r.push([o,n]),"north"===s&&n++,"west"===s&&o++;return new t(r)}(e,i,s);switch(s){case"north":if(i[1]+e>this.size)throw console.log(i),console.log(e),new Error("Ship is out of bounds");break;case"west":if(i[0]+e>this.size)throw new Error("Ship is out of bounds")}return r.getActivePositions().forEach((t=>{let e=t[0],i=t[1];if(0!==this.board[i][e])throw new Error("A ship already exists in this position")})),r.getActivePositions().forEach((t=>{let e=t[0],i=t[1];this.board[i][e]=1})),this.ships.push(r),this.ships}receiveAttack(t,e){if(t<0||e<0||t>=this.size||e>=this.size)throw new Error("Invalid coordinates");return!!this.ships.some((i=>{if(i.hit(t,e))return this.board[e][t]=3,!0}))||(this.board[e][t]=2,!1)}allShipsSunk(){return this.ships.every((t=>t.isSunk()))}}function i(t){return new e(t)}const s=document.querySelector("#content");function r(t){i(t);const e=document.createElement("div");e.setAttribute("class","gameboard");const s=document.createElement("table");for(let e=0;e<t;e++){let e=document.createElement("tr");for(let i=0;i<t;i++){let t=document.createElement("td");e.appendChild(t),t.setAttribute("class","empty unhit")}s.appendChild(e)}return e.appendChild(s),e}!function(){s.replaceChildren();i(6);const t=r(6);t.setAttribute("class","gameboard playerBoard");i(6);const e=r(6);e.setAttribute("class","gameboard computerBoard"),s.appendChild(t),s.appendChild(e)}()})();